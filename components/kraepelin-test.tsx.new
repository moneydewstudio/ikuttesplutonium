import { useState, useEffect, useRef, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { ArrowRightCircle, XCircle, PlayCircle, PauseCircle, AlertTriangle, ArrowRight, ChevronLeft, ChevronRight } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Badge } from '@/components/ui/badge';

type KraepelinTestProps = {
  durationInMinutes: number;
  onComplete: (results: KraepelinResults) => void;
};

export type KraepelinResults = {
  totalAnswers: number;
  correctAnswers: number;
  accuracy: number;
  speed: number;
  consistency: number;
  endurance: number;
  columns: {
    answers: number;
    correct: number;
    accuracy: number;
  }[];
};

// Represents a single number in the test with its result
type KraepelinProblem = {
  value: number;
  userAnswer: number | null;
  isCorrect: boolean | null;
};

// Represents a column of 60 numbers (authentic Kraepelin format)
type KraepelinColumn = {
  numbers: KraepelinProblem[];
  completed: boolean;
  answers: number;
  correct: number;
  timeSpent: number;
};

// Helper to generate a random number between min and max (inclusive)
const getRandomNumber = (min: number, max: number) => {
  return Math.floor(Math.random() * (max - min + 1) + min);
};

// Generate a column of random single-digit numbers
const generateColumn = (length: number = 60): KraepelinProblem[] => {
  return Array.from({ length }, () => ({
    value: getRandomNumber(1, 9),
    userAnswer: null,
    isCorrect: null
  }));
};

export function KraepelinTest({ durationInMinutes, onComplete }: KraepelinTestProps) {
  const totalTimeInSeconds = durationInMinutes * 60;
  const [timeLeft, setTimeLeft] = useState(totalTimeInSeconds);
  const [isPaused, setIsPaused] = useState(false);
  const [isStarted, setIsStarted] = useState(false);
  const [isInstructionsOpen, setIsInstructionsOpen] = useState(true);
  const [isConfirmExitOpen, setIsConfirmExitOpen] = useState(false);
  
  // For column timing (15 seconds per column)
  const secondsPerColumn = 15;
  const [columnTimeLeft, setColumnTimeLeft] = useState(secondsPerColumn);
  
  // For tracking statistics
  const [totalAnswers, setTotalAnswers] = useState(0);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  
  // Test columns (50 columns total in authentic test)
  const [columns, setColumns] = useState<KraepelinColumn[]>([]);
  const [currentColumnIndex, setCurrentColumnIndex] = useState(0);
  const [currentPosition, setCurrentPosition] = useState(0);
  const [lastInput, setLastInput] = useState<string | null>(null);
  const [lastCorrect, setLastCorrect] = useState<boolean | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  
  // Initialize columns
  const initializeTest = useCallback(() => {
    // Create 50 columns with 60 numbers each (authentic format)
    const initialColumns: KraepelinColumn[] = Array.from({ length: 50 }, () => ({
      numbers: generateColumn(60),
      completed: false,
      answers: 0,
      correct: 0,
      timeSpent: 0
    }));
    
    setColumns(initialColumns);
    setCurrentColumnIndex(0);
    setCurrentPosition(0);
    setTotalAnswers(0);
    setCorrectAnswers(0);
    setColumnTimeLeft(secondsPerColumn);
  }, [secondsPerColumn]);
  
  // Start the test
  const startTest = () => {
    setIsStarted(true);
    setIsInstructionsOpen(false);
    initializeTest();
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };
  
  // Handle column timer logic
  useEffect(() => {
    if (!isStarted || isPaused) return;
    
    const timer = setInterval(() => {
      // Update overall test timer
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(timer);
          finishTest();
          return 0;
        }
        return prev - 1;
      });
      
      // Update column timer
      setColumnTimeLeft((prev) => {
        if (prev <= 1) {
          // Time's up for this column, move to next
          moveToNextColumn();
          return secondsPerColumn;
        }
        return prev - 1;
      });
    }, 1000);
    
    return () => clearInterval(timer);
  }, [isStarted, isPaused, secondsPerColumn, currentColumnIndex]);
  
  // Move to the next column
  const moveToNextColumn = useCallback(() => {
    // Update the current column as completed
    setColumns(prevColumns => {
      const updatedColumns = [...prevColumns];
      // Mark current column as completed
      if (currentColumnIndex < updatedColumns.length) {
        updatedColumns[currentColumnIndex] = {
          ...updatedColumns[currentColumnIndex],
          completed: true,
          timeSpent: secondsPerColumn - columnTimeLeft
        };
      }
      return updatedColumns;
    });
    
    // Move to next column if available
    if (currentColumnIndex < columns.length - 1) {
      setCurrentColumnIndex(prev => prev + 1);
      setCurrentPosition(0); // Reset position to top of new column
      setColumnTimeLeft(secondsPerColumn); // Reset column timer
    } else {
      // All columns completed
      finishTest();
    }
    
    // Clear input and focus
    if (inputRef.current) {
      inputRef.current.value = '';
      inputRef.current.focus();
    }
    setLastInput(null);
    setLastCorrect(null);
  }, [columns.length, currentColumnIndex, columnTimeLeft, secondsPerColumn]);
  
  // Format time as MM:SS
  const formatTime = (timeInSeconds: number): string => {
    const minutes = Math.floor(timeInSeconds / 60);
    const seconds = timeInSeconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  };
  
  // Calculate progress percentage
  const progressPercentage = ((totalTimeInSeconds - timeLeft) / totalTimeInSeconds) * 100;
  const columnProgressPercentage = ((secondsPerColumn - columnTimeLeft) / secondsPerColumn) * 100;
  
  // Handle user input
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    
    // Only process single-digit numbers
    if (/^[0-9]$/.test(value)) {
      const userAnswer = parseInt(value, 10);
      
      if (!columns[currentColumnIndex]) return; // Guard clause
      
      const currentNumber = columns[currentColumnIndex].numbers[currentPosition];
      // Get next number if it exists
      const nextNumber = currentPosition < 59 
        ? columns[currentColumnIndex].numbers[currentPosition + 1]
        : null;
      
      // Calculate correct answer (sum of current and next number)
      const correctAnswer = nextNumber 
        ? (currentNumber.value + nextNumber.value) % 10 // Get last digit
        : currentNumber.value; // Last number in column
      
      // Check if answer is correct
      const isCorrect = userAnswer === correctAnswer;
      
      // Save the input for display and feedback
      setLastInput(value);
      setLastCorrect(isCorrect);
      
      // Update the current number
      setColumns(prevColumns => {
        const updatedColumns = [...prevColumns];
        const updatedNumbers = [...updatedColumns[currentColumnIndex].numbers];
        
        updatedNumbers[currentPosition] = {
          ...updatedNumbers[currentPosition],
          userAnswer,
          isCorrect
        };
        
        updatedColumns[currentColumnIndex] = {
          ...updatedColumns[currentColumnIndex],
          numbers: updatedNumbers,
          answers: updatedColumns[currentColumnIndex].answers + 1,
          correct: updatedColumns[currentColumnIndex].correct + (isCorrect ? 1 : 0)
        };
        
        return updatedColumns;
      });
      
      // Update overall statistics
      setTotalAnswers(prev => prev + 1);
      if (isCorrect) {
        setCorrectAnswers(prev => prev + 1);
      }
      
      // Short delay to show feedback before moving to next problem
      setTimeout(() => {
        // Clear input and feedback indicators
        e.target.value = '';
        setLastInput(null);
        setLastCorrect(null);
        
        // Move to next position in column or next column if at end
        if (currentPosition < 59) {
          setCurrentPosition(prev => prev + 1);
        } else {
          moveToNextColumn();
        }
        
        // Keep focus on the input
        if (inputRef.current) {
          inputRef.current.focus();
        }
      }, 150);
    }
  };
  
  // Calculate results and finish the test
  const finishTest = useCallback(() => {
    // Calculate metrics from column data
    const completedColumns = columns.filter(col => col.completed || col.answers > 0);
    
    // Calculate metrics (simplified calculations for demo)
    const accuracy = totalAnswers > 0 ? correctAnswers / totalAnswers : 0;
    
    // Speed: normalized to a 1-5 scale (based on answers per minute)
    const answersPerMinute = totalAnswers / (durationInMinutes || 1);
    const speed = Math.min(answersPerMinute / 20, 5); // Calibrated scale
    
    // Consistency: standard deviation of performance across columns
    let consistency = 5; // Default high consistency
    if (completedColumns.length > 1) {
      const accuracies = completedColumns.map(c => c.answers > 0 ? c.correct / c.answers : 0);
      const avgAccuracy = accuracies.reduce((sum, acc) => sum + acc, 0) / accuracies.length;
      const variance = accuracies.reduce((sum, acc) => sum + Math.pow(acc - avgAccuracy, 2), 0) / accuracies.length;
      const stdDev = Math.sqrt(variance);
      consistency = Math.max(5 - (stdDev * 10), 1); // Convert to 1-5 scale
    }
    
    // Endurance: compare performance in first half vs second half
    let endurance = 3; // Default average endurance
    if (completedColumns.length > 1) {
      const midpoint = Math.floor(completedColumns.length / 2);
      const firstHalf = completedColumns.slice(0, midpoint);
      const secondHalf = completedColumns.slice(midpoint);
      
      const firstHalfAccuracy = firstHalf.reduce((sum, c) => sum + (c.answers > 0 ? c.correct / c.answers : 0), 0) / firstHalf.length;
      const secondHalfAccuracy = secondHalf.reduce((sum, c) => sum + (c.answers > 0 ? c.correct / c.answers : 0), 0) / secondHalf.length;
      
      const enduranceRatio = secondHalfAccuracy / (firstHalfAccuracy || 0.01); // Avoid division by zero
      endurance = Math.min(Math.max(enduranceRatio * 3, 1), 5); // Convert to 1-5 scale
    }
    
    // Format column results for the API
    const columnResults = completedColumns.map(column => ({
      answers: column.answers,
      correct: column.correct,
      accuracy: column.answers > 0 ? column.correct / column.answers : 0
    }));
    
    // Complete the test with results
    onComplete({
      totalAnswers,
      correctAnswers,
      accuracy,
      speed,
      consistency,
      endurance,
      columns: columnResults
    });
  }, [columns, totalAnswers, correctAnswers, durationInMinutes, onComplete]);
  
  // Handle pause/resume
  const togglePause = () => {
    setIsPaused(prev => !prev);
    if (isPaused && inputRef.current) {
      inputRef.current.focus();
    }
  };
  
  // Handle exit confirmation
  const handleExitRequest = () => {
    if (isStarted && !isPaused) {
      setIsPaused(true);
    }
    setIsConfirmExitOpen(true);
  };
  
  const confirmExit = () => {
    finishTest();
    setIsConfirmExitOpen(false);
  };
  
  return (
    <div className="relative">
      {/* Instructions Dialog */}
      <Dialog open={isInstructionsOpen} onOpenChange={setIsInstructionsOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Instruksi Tes Kraepelin</DialogTitle>
            <DialogDescription>
              Tes ini mengukur kecepatan, ketelitian, konsistensi, dan ketahanan mental Anda.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <h3 className="font-semibold mb-1">Cara Mengerjakan:</h3>
              <ol className="list-decimal list-inside space-y-2 text-sm text-gray-600 dark:text-gray-400">
                <li>Anda akan melihat kolom angka yang harus dijumlahkan dua-dua.</li>
                <li>Lihat angka yang diberi highlight, lalu <strong>jumlahkan dengan angka di bawahnya</strong>.</li>
                <li>Masukkan <strong>digit terakhir</strong> dari hasil penjumlahan.</li>
                <li>Setiap kolom memiliki waktu 15 detik. Setelah waktu habis, kolom akan berganti secara otomatis.</li>
                <li>Tes terdiri dari 50 kolom dengan 60 angka per kolom.</li>
                <li>Bekerjalah secepat dan seteliti mungkin. Fokus sangat penting!</li>
              </ol>
            </div>
            
            <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-md">
              <h3 className="font-semibold mb-1">Contoh:</h3>
              <div className="flex flex-col items-center space-y-2 mb-2">
                <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 p-2 rounded text-center font-mono w-12">8</div>
                <div className="bg-white dark:bg-gray-700 p-2 rounded text-center font-mono w-12">7</div>
              </div>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                <span className="font-mono">8 + 7 = 15</span>, masukkan <span className="font-mono">5</span>
              </p>
            </div>
            
            <div className="flex items-center text-amber-600 dark:text-amber-400 bg-amber-50 dark:bg-amber-900/20 p-3 rounded-md">
              <AlertTriangle className="w-5 h-5 mr-2" />
              <p className="text-sm">
                Tes akan berjalan selama {durationInMinutes} menit. Jangan tinggalkan halaman selama tes berlangsung.
              </p>
            </div>
          </div>
          
          <DialogFooter>
            <Button onClick={startTest} className="w-full">
              Mulai Tes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Exit Confirmation Dialog */}
      <Dialog open={isConfirmExitOpen} onOpenChange={setIsConfirmExitOpen}>
        <DialogContent className="max-w-sm">
          <DialogHeader>
            <DialogTitle>Yakin ingin mengakhiri tes?</DialogTitle>
            <DialogDescription>
              Jika Anda mengakhiri tes sekarang, tes akan dihitung berdasarkan jawaban yang sudah diisi.
            </DialogDescription>
          </DialogHeader>
          
          <DialogFooter className="flex flex-col sm:flex-row gap-2">
            <Button variant="outline" onClick={() => {
              setIsConfirmExitOpen(false);
              if (isPaused) {
                setIsPaused(false);
              }
            }} className="sm:flex-1">
              Lanjutkan Tes
            </Button>
            <Button variant="destructive" onClick={confirmExit} className="sm:flex-1">
              Akhiri Tes
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Test UI */}
      {isStarted && (
        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
          {/* Timer and controls */}
          <div className="flex justify-between items-center mb-4">
            <div className="flex flex-col gap-1">
              <div className="flex items-center gap-2">
                <div className="text-2xl font-mono font-bold">
                  {formatTime(timeLeft)}
                </div>
                <Badge variant="outline" className="font-mono">
                  Kolom {currentColumnIndex + 1}/50
                </Badge>
              </div>
              <Progress value={progressPercentage} className="w-40 h-2" />
            </div>
            
            <div className="flex gap-2">
              <Button 
                variant="ghost" 
                className="p-2 h-auto"
                onClick={togglePause}
              >
                {isPaused ? 
                  <PlayCircle className="w-8 h-8 text-green-600 dark:text-green-500" /> : 
                  <PauseCircle className="w-8 h-8 text-amber-600 dark:text-amber-500" />
                }
              </Button>
              
              <Button 
                variant="ghost" 
                className="p-2 h-auto"
                onClick={handleExitRequest}
              >
                <XCircle className="w-8 h-8 text-red-600 dark:text-red-500" />
              </Button>
            </div>
          </div>
          
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center gap-2">
              <div className="text-sm font-mono font-medium">
                Waktu kolom: {columnTimeLeft}s
              </div>
            </div>
            <Progress value={columnProgressPercentage} className="w-40 h-2" />
          </div>

          {/* Stats at-a-glance */}
          <div className="grid grid-cols-3 gap-2 mb-6">
            <div className="bg-blue-50 dark:bg-blue-900/20 p-2 rounded text-center">
              <div className="text-sm text-gray-500 dark:text-gray-400">Dijawab</div>
              <div className="text-xl font-bold">{totalAnswers}</div>
            </div>
            <div className="bg-green-50 dark:bg-green-900/20 p-2 rounded text-center">
              <div className="text-sm text-gray-500 dark:text-gray-400">Benar</div>
              <div className="text-xl font-bold">{correctAnswers}</div>
            </div>
            <div className="bg-purple-50 dark:bg-purple-900/20 p-2 rounded text-center">
              <div className="text-sm text-gray-500 dark:text-gray-400">Akurasi</div>
              <div className="text-xl font-bold">{totalAnswers > 0 ? Math.round((correctAnswers / totalAnswers) * 100) : 0}%</div>
            </div>
          </div>
          
          {/* Test problems - Authentic Kraepelin UI with vertical stacked numbers */}
          <div className="flex flex-col md:flex-row gap-6">
            <div className="w-full md:w-1/2">
              <div className="flex justify-between items-center mb-2">
                <h3 className="text-lg font-semibold">Angka:</h3>
                <div className="text-sm text-gray-500">
                  Posisi: {currentPosition + 1}/60
                </div>
              </div>
              
              <div className="relative h-[360px] border border-gray-200 dark:border-gray-700 rounded-lg p-2">
                {/* Fixed highlighted number (current) */}
                <div className="sticky top-0 z-10 mb-2 bg-white dark:bg-gray-800 pt-2 pb-1">
                  {columns[currentColumnIndex] && currentPosition < 60 && (
                    <div className="flex justify-center p-2 rounded-lg w-full bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800">
                      <div 
                        className="bg-white dark:bg-gray-700 w-16 h-16 rounded flex items-center justify-center text-3xl font-mono shadow-sm"
                      >
                        {columns[currentColumnIndex].numbers[currentPosition].value}
                      </div>
                    </div>
                  )}
                </div>
                
                {/* Scrollable column of other numbers */}
                <div className="h-[290px] overflow-y-auto pr-2 hide-scrollbar">
                  <div className="flex flex-col items-center space-y-4 pt-2">
                    {columns[currentColumnIndex] && 
                      columns[currentColumnIndex].numbers
                        .slice(currentPosition + 1, currentPosition + 10) // Show next 10 numbers
                        .map((problem, index) => (
                          <div 
                            key={`next-${index}`}
                            className="bg-white dark:bg-gray-700 w-16 h-16 rounded flex items-center justify-center text-2xl font-mono"
                          >
                            {problem.value}
                          </div>
                        ))
                    }
                  </div>
                </div>
              </div>
            </div>
            
            <div className="w-full md:w-1/2">
              <h3 className="text-lg font-semibold mb-3">Jawaban:</h3>
              
              <div className="flex flex-col items-center space-y-4">
                <div className="relative w-full max-w-xs">
                  <input
                    ref={inputRef}
                    type="text"
                    inputMode="numeric"
                    pattern="[0-9]*"
                    maxLength={1}
                    className={`
                      w-full h-24 text-4xl font-mono text-center rounded-lg border-2 
                      ${lastCorrect === true ? 'border-green-500 bg-green-50 dark:bg-green-900/20' : 
                        lastCorrect === false ? 'border-red-500 bg-red-50 dark:bg-red-900/20' : 
                        'border-gray-300 dark:border-gray-600'
                      }
                      focus:outline-none focus:ring-2 focus:ring-blue-500
                    `}
                    onChange={handleInputChange}
                    disabled={isPaused}
                  />
                  
                  {lastCorrect !== null && (
                    <div className={`
                      absolute right-3 top-3 text-sm font-semibold px-2 py-1 rounded
                      ${lastCorrect ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200' : 
                                    'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200'}
                    `}>
                      {lastCorrect ? 'Benar' : 'Salah'}
                    </div>
                  )}
                </div>
                
                <div className="text-center text-gray-600 dark:text-gray-400 max-w-xs">
                  <p className="mb-2">Masukkan digit terakhir dari hasil penjumlahan angka yang diberi highlight dengan angka di bawahnya.</p>
                  <p className="text-sm">Contoh: 8 + 7 = 15, masukkan 5</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}